{"version":3,"sources":["Modules/CityComponent.js","Modules/WeatherInfo.js","App.js","index.js"],"names":["WeatherLogo","styled","img","ChooseCityLabel","span","SearchBox","form","CityComponent","props","updateCity","fetchWeather","src","onSubmit","placeholder","onChange","e","target","value","type","WeatherInfoIcons","Sunset","Sunrise","Humidity","Wind","Pressure","Cloud","Max_Temp","Min_Temp","WeatherIcons","WeatherCondition","div","Condition","Location","WeatherInfoLabel","WeatherInfoContainer","InfoContainer","InfoIcon","InfoLabel","WeatherInfoComponent","name","WeatherInfo","timeStamp","weather","isDay","icon","includes","Math","floor","main","temp","description","alt","sys","country","Date","getHours","getMinutes","temp_max","temp_min","humidity","wind","speed","pressure","clouds","all","Container","AppLabel","App","useState","city","updateWeather","a","preventDefault","axios","get","response","data","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3879e60f.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst WeatherLogo = styled.img`\r\n    width: 140px;\r\n    height: 140px;\r\n    display: flex;\r\n    margin: 40px auto;\r\n`;\r\n\r\nconst ChooseCityLabel = styled.span`\r\n  color: black;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin: 10px auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst SearchBox = styled.form`\r\n  display: flex;\r\n  flex-direction: row;\r\n  border: black solid 1px\r\n  border-radius: 2px\r\n  color: black;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin: 20px auto;\r\n  & input{\r\n      padding: 10px;\r\n      font-size: 14px;\r\n      outline: none;\r\n      font-weight: bold;\r\n      border: none;\r\n  }\r\n\r\n  & button{\r\n      padding: 10px;\r\n      font-size: 14px;\r\n      color: white;\r\n      background-color: black;\r\n      border: none;\r\n      outline: none;\r\n      font-weight: bold;\r\n      cursor: pointer;\r\n  }\r\n`;\r\n\r\n\r\nconst CityComponent = (props) => {\r\n\r\n    const {updateCity , fetchWeather} = props;\r\n    return (\r\n        <div>\r\n            <WeatherLogo src=\"/icons/perfect-day.svg\"/>\r\n            <ChooseCityLabel>Find Weather Of Your City</ChooseCityLabel>\r\n            <SearchBox onSubmit={fetchWeather}>\r\n                <input \r\n                    placeholder = \"City\"\r\n                    onChange={(e) => updateCity(e.target.value)}\r\n                />\r\n                <button type = \"submit\">Search</button>\r\n            </SearchBox>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CityComponent;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const WeatherInfoIcons = {\r\n    Sunset : \"/icons/sunset.svg\",\r\n    Sunrise : \"/icons/sunrise.svg\",\r\n    Humidity : \"/icons/humidity.svg\",\r\n    Wind : \"/icons/wind.svg\",\r\n    Pressure : \"/icons/pressure.svg\",\r\n    Cloud : \"/icons/cloud.svg\",\r\n    Max_Temp : \"/icons/temp.svg\",\r\n    Min_Temp : \"/icons/temp.svg\"\r\n}\r\n\r\nexport const WeatherIcons = {\r\n  \"01d\" : \"/icons/sunny.svg\",\r\n  \"01n\" : \"/icons/night.svg\",\r\n  \"02d\" : \"/icons/day.svg\",\r\n  \"02n\" : \"/icons/cloudy-night.svg\",\r\n  \"03d\" : \"/icons/cloudy.svg\",\r\n  \"03n\" : \"/icons/cloudy.svg\",\r\n  \"04d\" : \"/icons/perfect-day.svg\",\r\n  \"04n\" : \"/icons/cloudy-night.svg\",\r\n  \"09d\" : \"/icons/rain.svg\",\r\n  \"09n\" : \"/icons/rain-night.svg\",\r\n  \"10d\" : \"/icons/rain.svg\",\r\n  \"10n\" : \"/icons/rain-night.svg\",\r\n  \"11d\" : \"/icons/storm.svg\",\r\n  \"11n\" : \"/icons/storm.svg\",\r\n  \"13d\" : \"/icons/snow.svg\",\r\n  \"13n\" : \"/icons/snow.svg\",\r\n  \"50d\" : \"/icons/mist.svg\",\r\n  \"50n\" : \"/icons/mist.svg\",\r\n}\r\n\r\nconst WeatherCondition = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  width: 90%;\r\n  justify-content: space-between;\r\n  margin: 30px auto;\r\n`;\r\n\r\nconst Condition = styled.span`\r\n  margin: 20px auto;\r\n  font-size: 14px;\r\n  & span {\r\n    font-size: 28px;\r\n  }\r\n`;\r\n\r\nconst WeatherLogo = styled.img`\r\n  width: 100px;\r\n  height: 100px;\r\n  ${\"\" /* display: flex; */}\r\n  margin: 5px auto;\r\n`;\r\n\r\nconst Location = styled.span`\r\n    font-size: 28px;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst WeatherInfoLabel = styled.span`\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n    margin: 20px 25px 10px;\r\n    text-align: start;\r\n    width: 90%;\r\n`;\r\n\r\nconst WeatherInfoContainer = styled.div` \r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 90%;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nconst InfoContainer = styled.div`\r\n    display: flex;\r\n    margin: 5px 10px;\r\n    flex-direction: row;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n`;\r\n\r\nconst InfoIcon = styled.img`\r\n    width: 36px;\r\n    height: 36px;\r\n`;\r\n\r\nconst InfoLabel = styled.span`\r\n    display: flex;\r\n    flex-direction: column;\r\n    font-size: 14px;\r\n    margin: 15px;\r\n\r\n`;\r\n\r\nconst WeatherInfoComponent = (props) => {\r\n    const {name , value} =props;\r\n\r\n    return(\r\n        <InfoContainer>\r\n            <InfoIcon src ={WeatherInfoIcons[name]}/>\r\n            <InfoLabel>\r\n                {value}\r\n                <span>{name}</span>\r\n            </InfoLabel>\r\n        </InfoContainer>\r\n    );\r\n};\r\n\r\nconst WeatherInfo = (props) => {\r\n\r\n  const {weather} = props;\r\n  const isDay = weather?.weather[0].icon?.includes(\"d\");\r\n  const getTime = (timeStamp) =>{\r\n    return `${new Date(timeStamp * 1000).getHours()} :  ${new Date(timeStamp * 1000).getMinutes()}`\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <WeatherCondition>\r\n        <Condition>\r\n          <span>{`${Math.floor(weather?.main?.temp - 273)}°C`}</span>{` | ${weather?.weather[0].description}`}\r\n        </Condition>\r\n\r\n        <WeatherLogo src={WeatherIcons[weather?.weather[0].icon]} alt = \"abc\"/>\r\n\r\n      </WeatherCondition>\r\n\r\n      <Location>{`${weather?.name}, ${weather?.sys?.country}`}</Location>\r\n      <WeatherInfoLabel>Weather Info</WeatherInfoLabel>\r\n\r\n      <WeatherInfoContainer>\r\n          <WeatherInfoComponent \r\n            name={isDay ? \"Sunset\" : \"Sunrise\"} \r\n            value={getTime(weather?.sys[isDay ? \"sunset\" : \"sunrise\"])}\r\n          />\r\n          <WeatherInfoComponent name=\"Max_Temp\" value={`${Math.floor(weather?.main?.temp_max - 273)}°C`}/>\r\n          <WeatherInfoComponent name=\"Min_Temp\" value={`${Math.floor(weather?.main?.temp_min - 273)}°C`}/>\r\n\r\n          <WeatherInfoComponent name=\"Humidity\" value={`${weather?.main?.humidity} ${\"%\"}`}/>\r\n          <WeatherInfoComponent name=\"Wind\" value={`${weather?.wind?.speed} ${\"M/s\"}`}/>\r\n          <WeatherInfoComponent name=\"Pressure\" value={`${weather?.main?.pressure} ${\"hPa\"}`}/>\r\n          \r\n          \r\n          \r\n          <WeatherInfoComponent name=\"Cloud\" value={`${weather?.clouds?.all} ${\"%\"}`}/>\r\n      </WeatherInfoContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;\r\n","import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport CityComponent from \"./Modules/CityComponent\";\nimport WeatherInfo from \"./Modules/WeatherInfo\";\n\nconst API_KEY = \"b59a47d7dbc5018f670eff96feb04727\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: auto;\n  align-items: center;\n  box-shadow: 0 3px 6px 0 #555;\n  padding: 20px 10px;\n  border-radius: 4px;\n  width: 500px;\n  background: transparent;\n  font-family: montsserrat;\n`;\n\nconst AppLabel = styled.span`\n  color: black;\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nfunction App() {\n  const [city, updateCity] = useState();\n  const [weather, updateWeather] = useState();\n\n  const fetchWeather = async (e) => {\n    e.preventDefault();\n    const response =\n      await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}\n    `);\n    updateWeather(response.data);\n  };\n  return (\n    <Container>\n      <AppLabel>Weather App</AppLabel>\n      {weather ? (\n        <WeatherInfo weather={weather} />\n      ) : (\n        <CityComponent updateCity={updateCity} fetchWeather={fetchWeather} />\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}